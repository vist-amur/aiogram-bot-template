import phonenumbers
from aiogram import types
from aiogram.dispatcher import FSMContext
from phonenumbers import NumberParseException

from loader import dp

from states import Callback_steps
from handlers.users.menu import get_sales
from utils.misc import get_addr1c
from utils.misc import mail



@dp.message_handler(text='–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ üìû')
async def answ_name(message: types.Message):
    await message.answer(
        "–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ö–∞–∫ –∫ –í–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    await Callback_steps.answ_name.set()


@dp.message_handler(state=Callback_steps.answ_name)
async def set_name(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ‚è∞":
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_clock_1c_brome())
    if answer == "–ù–∞—à –∞–¥—Ä–µ—Å üì®":
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_addr1c_brome())
    if answer == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üì¢':
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_null())
    if answer == '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚ÇΩ':
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_null())
    if answer == '–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ üìâ':
        await state.finish()
        await state.reset_state()
        #return await message.answer(get_addr1c.get_discounts_1c_brome())
        return await get_sales(message)
    if answer == '–ù–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã üìÑ':
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_requisites_1c_brome())

    await state.update_data(answer_name=answer)

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    await Callback_steps.answ_phone.set()


@dp.message_handler(state=Callback_steps.answ_phone)
async def set_phone(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer_phone=answer)

    user_data = await state.get_data()
    try:
        mynumber = phonenumbers.parse(user_data['answer_phone'], "RU")
    except NumberParseException:
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ!")
        await state.finish()
        await state.reset_state()
        return
    if phonenumbers.is_valid_number(mynumber):
        get_addr1c.set_callback_1c_brome(user_data['answer_name'], user_data['answer_phone'])
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é! –ú—ã –Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –í–∞–º!")
        await mail.sendmail(f'user {str(message.chat.values["id"])} firstname {message.chat.values["username"]}', state)
    else:
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ!")
        await state.finish()
        await state.reset_state()
    # await message.answer(f"–í–∞—à–µ –∏–º—è: {user_data['answer_name']}")
    # await message.answer(
    #     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    # await Callback_steps.answ_phone.set()
    await state.finish()
    await state.reset_state()
