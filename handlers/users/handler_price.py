import asyncio

import phonenumbers
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ChatActions

from loader import dp

from states import Price_steps
from utils.misc import get_addr1c
from handlers.users.menu import get_sales


@dp.message_handler(text='–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚ÇΩ')
async def price(message: types.Message, state: FSMContext):
    await message.answer(
        "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ü–µ–Ω–∞–º –∏ –Ω–∞–ª–∏—á–∏—é —Ç–æ–≤–∞—Ä–∞: –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ "
        "—É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–µ—á, "
        "–¥–µ–∑, —à–∞–ø–æ—á–∫'")
    await Price_steps.prs_keywords.set()


@dp.message_handler(state=Price_steps.prs_keywords)
async def set_name(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ‚è∞":
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_clock_1c_brome())
    if answer == "–ù–∞—à –∞–¥—Ä–µ—Å üì®":
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_addr1c_brome())
    if answer == '–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ üìû':
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_null())
    if answer == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üì¢':
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_null())
    if answer == '–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ üìâ':
        await state.finish()
        await state.reset_state()
        return await get_sales(message)
        #return await message.answer(get_addr1c.get_discounts_1c_brome())
    if answer == '–ù–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã üìÑ':
        await state.finish()
        await state.reset_state()
        return await message.answer(get_addr1c.get_requisites_1c_brome())

    await dp.bot.send_message(message.chat.id, "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    await asyncio.sleep(3)

    await state.update_data(answer_text=answer)

    user_data = await state.get_data()
    # get_addr1c.set_questions_1c_brome(user_data['answer_name'], user_data['answer_phone'], user_data['answer_text'])
    info = get_addr1c.get_price_1c_brome(user_data['answer_text'])
    if len(info) == 0:
        await message.answer('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!')
        await state.finish()
        # await state.reset_state()
        return
    pOst = ""
    for i, y in enumerate(info):
        if y["–û—Å—Ç–∞—Ç–æ–∫"] == 0:
            pOst = "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ ‚≠ï"
        else:
            pOst = "–í –Ω–∞–ª–∏—á–∏–∏ ‚úÖ"
        istr = f'{y["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"]}, –ê—Ä—Ç–∏–∫—É–ª: {y["–ê—Ä—Ç–∏–∫—É–ª"]}, {pOst}, –¶–µ–Ω–∞: {y["–¶–µ–Ω–∞"]} —Ä—É–±.'
        await message.answer(istr)

    await state.finish()
    # await state.reset_state()
